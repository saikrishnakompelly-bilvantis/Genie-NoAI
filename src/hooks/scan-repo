#!/bin/bash

set -e  # Exit on error

# Get the directory where this script is located and the current directory
SCRIPT_DIR="$(git config --global --get core.hookspath)"
CURRENT_DIR="$(pwd)"

# Parse command line arguments
NO_BROWSER=false
for arg in "$@"; do
    if [ "$arg" = "--no-browser" ]; then
        NO_BROWSER=true
        break
    fi
done

# Configuration
DISALLOWED_EXTENSIONS=".crt,.cer,.ca-bundle,.p7b,.p7c,.p7s,.pem,.jceks,.key,.keystore,.jks,.p12,.pfx"

# Set up paths relative to the script location
COMMIT_SCRIPTS_DIR="$SCRIPT_DIR/commit-scripts"
SECRETSCAN_PY="$COMMIT_SCRIPTS_DIR/secretscan.py"
SCAN_RESULTS_DIR="$SCRIPT_DIR/.scan_results"
REPORTS_DIR="$SCRIPT_DIR/.reports"
RESULTS_DIR="$SCRIPT_DIR/scan_results"
RESULTS_FILE="$RESULTS_DIR/scan_results.json"
DISALLOWED_FILES_LIST="$RESULTS_DIR/disallowed_files.txt"

# Function to clean up temporary files
cleanup() {
    rm -f "$SCAN_RESULTS_DIR/files_to_scan.txt"
}

# Set up cleanup on script exit
trap cleanup EXIT

# Create necessary directories if they don't exist
for dir in "$SCAN_RESULTS_DIR" "$REPORTS_DIR" "$RESULTS_DIR"; do
    if ! mkdir -p "$dir"; then
        echo "‚ùå Error: Failed to create directory: $dir"
        exit 1
    fi
done

# Check Python availability and version
if command -v python3 > /dev/null 2>&1; then
    python_cmd="python3"
    python_version=$($python_cmd --version 2>&1)
    echo "‚úì Using $python_version"
elif command -v python > /dev/null 2>&1; then
    python_cmd="python"
    python_version=$($python_cmd --version 2>&1)
    echo "‚úì Using $python_version"
else
    echo "‚ùå Error: Python3 is not installed. Secret scanning functionality will not work."
    exit 1
fi

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "‚ùå Error: Not a git repository"
    exit 1
fi

# Check for disallowed file extensions
echo "üîç Checking for disallowed file extensions..."
IFS=',' read -ra EXTENSIONS <<< "$DISALLOWED_EXTENSIONS"
for ext in "${EXTENSIONS[@]}"; do
    (
        # Check tracked files
        git ls-files
        # Check untracked files (excluding ignored ones)
        git ls-files --others --exclude-standard
    ) | grep -i "\\${ext}$" >> "$DISALLOWED_FILES_LIST" 2>/dev/null || true
done

# Function to display HTML results
display_html_results() {
    local results_file="$1"
    if [ ! -f "$results_file" ]; then
        echo "‚ùå Error: Results file not found: $results_file"
        return 1
    fi
    
    # Get Git information - only username and timestamp
    GIT_AUTHOR=$(git config user.name)
    TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")
    
    $python_cmd - <<EOF
import json
import html
from datetime import datetime
import webbrowser
import os
import subprocess
import sys

# Get the no-browser flag from environment
NO_BROWSER = True  # Always set to True to prevent automatic browser opening

def create_html(results_file, disallowed_files_list):
    try:
        with open(results_file, 'r') as f:
            results_data = json.load(f)
    except Exception as e:
        print(f"Error reading results file: {e}")
        return None

    # Read disallowed files if they exist
    disallowed_files = []
    if os.path.exists(disallowed_files_list) and os.path.getsize(disallowed_files_list) > 0:
        with open(disallowed_files_list, 'r') as f:
            disallowed_files = [line.strip() for line in f.readlines()]

    def mask_secret(secret, visible_chars=3):
        if not secret:
            return ""
        secret = str(secret)
        if len(secret) <= visible_chars * 2:
            return secret
        return f"{secret[:visible_chars]}{'*' * (len(secret) - visible_chars * 2)}{secret[-visible_chars:]}"

    secrets_table_rows = "".join(
        f"""<tr>
            <td class="sno">{i}</td>
            <td class="filename">{html.escape(data.get('file', ''))}</td>
            <td class="line-number">{data.get('line_number', '')}</td>
            <td class="secret"><div class="secret-content">{html.escape(mask_secret(data.get('line', '')))}</div></td>
        </tr>"""
        for i, data in enumerate(results_data, 1)
    )

    disallowed_files_section = ""
    if disallowed_files:
        disallowed_files_section = f"""
        <div id="disallowedFilesFound">
            <h2>Disallowed Files Found:</h2>
            <table id="disallowedFilesTable">
                <tr>
                    <th style="width:5%">S.No</th>
                    <th style="width:95%">Filename</th>
                </tr>
                {''.join(f'<tr><td class="sno">{i}</td><td class="disallowed-file">{html.escape(file)}</td></tr>' for i, file in enumerate(disallowed_files, 1))}
            </table>
        </div>
        """

    # Add author and scan date to the HTML content
    # author_info = f"<p><strong>Author:</strong> {$GIT_AUTHOR}</p>"
    author_info = subprocess.check_output(['git', 'config', 'user.name']).decode('utf-8').strip()
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    scan_date_info = f"<p><strong>Scan Date:</strong> {timestamp}</p>"

    return f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Repository Scan Results</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.4/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.4/vfs_fonts.js"></script>
    <style>
        body {{ font-family: -apple-system, system-ui, sans-serif; margin: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
        .header-info {{ 
            background: #f8f9fa; 
            padding: 15px; 
            border-radius: 5px; 
            margin-bottom: 20px;
            border-left: 4px solid #07439C;
        }}
        .header-info p {{ 
            margin: 5px 0; 
            color: #666;
            font-size: 14px;
        }}
        .header-info strong {{ 
            color: #333;
            margin-right: 5px;
        }}
        table {{ 
            width: 100%; 
            border-collapse: collapse; 
            margin-top: 20px;
            table-layout: fixed;
        }}
        th, td {{ 
            padding: 12px; 
            text-align: left; 
            border: 1px solid #ddd;
            vertical-align: top;
            overflow-wrap: break-word;
            word-wrap: break-word;
            word-break: break-all;
            hyphens: auto;
        }}
        th {{ background: #07439C; color: white; }}
        tr:nth-child(even) {{ background: #f9f9f9; }}
        .secret-content {{ 
            color: #d32f2f; 
            font-family: monospace;
            white-space: pre-wrap;
            max-width: 100%;
            display: block;
            overflow-x: auto;
            padding: 4px 8px;
            margin: 0;
            border-radius: 4px;
            background: rgba(211, 47, 47, 0.05);
        }}
        .line-number {{ 
            color: #e74c3c; 
            font-weight: bold; 
            text-align: center;
        }}
        .disallowed-file {{
            color: #e74c3c;
            font-family: monospace;
        }}
        .sno {{
            text-align: center;
        }}
        h1, h2 {{ color: #07439C; margin-bottom: 20px; }}
        .download-btn {{
            padding: 10px 20px;
            background-color: #07439C;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-bottom: 20px;
        }}
        .download-btn:hover {{
            background-color: #053278;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <h1>Repository Scan Results</h1>
            <button id="downloadButton" class="download-btn">Download as PDF</button>
        </div>
        <div class="header-info">
            {author_info}
            {scan_date_info}
        </div>
        {disallowed_files_section}
        <h2>Potential Secrets Found:</h2>
        <table id="secretsTable">
            <tr>
                <th style="width:5%">S.No</th>
                <th style="width:25%">Filename</th>
                <th style="width:10%">Line #</th>
                <th style="width:60%">Secret</th>
            </tr>
            {secrets_table_rows}
        </table>
    </div>
    <script>
    document.getElementById("downloadButton").addEventListener("click", () => {{
        // Get secrets table data
        const secretsTable = document.getElementById("secretsTable");
        const secretRows = secretsTable.querySelectorAll("tr:not(:first-child)");
        const secrets = Array.from(secretRows).map((row, index) => {{
            const cells = row.querySelectorAll("td");
            return {{
                sno: cells[0]?.innerText || "",
                filename: cells[1]?.innerText || "",
                lineNumber: cells[2]?.innerText || "",
                secret: cells[3]?.innerText || ""
            }};
        }});

        // Get disallowed files data if it exists
        const disallowedFilesSection = document.getElementById("disallowedFilesFound");
        const disallowedRows = disallowedFilesSection ? 
            Array.from(disallowedFilesSection.querySelectorAll("tr:not(:first-child)")) : [];
        const disallowedFiles = disallowedRows.map(row => {{
            const cells = row.querySelectorAll("td");
            return {{
                sno: cells[0]?.innerText || "",
                filename: cells[1]?.innerText || ""
            }};
        }});

        // Create file name using current date
        const currentDate = new Date();
        const formattedDate = currentDate.toLocaleDateString('en-GB', {{
            day: '2-digit', month: 'short', year: 'numeric'
        }}).replace(' ', '_').replace(',', '');
        const fileName = 'repo_scan_' + formattedDate + '.pdf';

        // Create the PDF document definition
        const docDefinition = {{
            pageOrientation: 'landscape',
            content: [
                {{ text: 'Repository Scan Results', style: 'header' }},
                // Disallowed Files Section
                ...(disallowedFiles.length ? [
                    {{ text: 'Disallowed Files Found:', style: 'subheader' }},
                    {{
                        table: {{
                            headerRows: 1,
                            widths: ['5%', '95%'],
                            body: [
                                [
                                    {{ text: 'S.No', fillColor: '#E9E5E5', bold: true, alignment: 'center' }},
                                    {{ text: 'Filename', fillColor: '#E9E5E5', bold: true }}
                                ],
                                ...disallowedFiles.map(file => [
                                    {{ text: file.sno, alignment: 'center' }},
                                    {{ text: file.filename }}
                                ])
                            ]
                        }},
                        margin: [0, 0, 0, 20]
                    }}
                ] : []),
                // Secrets Section
                {{ text: 'Potential Secrets Found:', style: 'subheader' }},
                {{
                    table: {{
                        headerRows: 1,
                        widths: ['5%', '25%', '10%', '60%'],
                        body: [
                            [
                                {{ text: 'S.No', fillColor: '#E9E5E5', bold: true, alignment: 'center' }},
                                {{ text: 'Filename', fillColor: '#E9E5E5', bold: true }},
                                {{ text: 'Line #', fillColor: '#E9E5E5', bold: true, alignment: 'center' }},
                                {{ text: 'Secret', fillColor: '#E9E5E5', bold: true }}
                            ],
                            ...secrets.map((secret, index) => [
                                {{ text: secret.sno, alignment: 'center' }},
                                secret.filename,
                                {{ text: secret.lineNumber, alignment: 'center' }},
                                secret.secret
                            ])
                        ]
                    }}
                }}
            ],
            styles: {{
                header: {{
                    fontSize: 18,
                    bold: true,
                    alignment: 'center',
                    margin: [0, 0, 0, 10]
                }},
                subheader: {{
                    fontSize: 14,
                    bold: true,
                    margin: [0, 10, 0, 5]
                }}
            }}
        }};

        // Generate and download the PDF
        pdfMake.createPdf(docDefinition).download(fileName);
    }});
    </script>
</body>
</html>"""

results_file = '''$results_file'''
reports_dir = '''$REPORTS_DIR'''
print(reports_dir)
disallowed_files_list = '''$DISALLOWED_FILES_LIST'''
os.environ['GIT_AUTHOR'] = '''$GIT_AUTHOR'''
os.environ['TIMESTAMP'] = '''$TIMESTAMP'''

if os.path.exists(results_file):
    html_content = create_html(results_file, disallowed_files_list)
    if html_content:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        html_report = os.path.join(reports_dir, f'scan_report_{timestamp}.html')
        with open(html_report, 'w') as f:
            f.write(html_content)
        print(f"\nReport saved to: {html_report}")
        webbrowser.open('file://' + os.path.abspath(html_report))
EOF
}

echo "üîç Starting repository-wide secret scan..."

# Get all files in the repository, excluding unwanted files
echo "üìÇ Getting list of files to scan..."
# Get both tracked and untracked files
(
    # Get tracked files
    git ls-files -z
    # Get untracked files (excluding ignored ones)
    git ls-files --others --exclude-standard -z
) | tr '\0' '\n' | \
    grep -Ev '\.(zip|gz|tar|rar|7z|exe|dll|so|dylib|jar|war|ear|class|pyc|o|a|lib|obj|bin|jpg|jpeg|png|gif|bmp|ico|mp3|mp4|avi|mov|wmv|flv|pdf|doc|docx|xls|xlsx|ppt|pptx|ttf|otf|woff|woff2|eot|svg|tif|tiff|ico|webp|min\.js|min\.css|map|bundle\.js|bundle\.css|vendor\.js|vendor\.css)$' | \
    grep -v '^\..*/' | \
    grep -v -E '^(distribution/|node_modules/|vendor/|build/|dist/|reports/|scan_results/)' > "$SCAN_RESULTS_DIR/files_to_scan.txt"

# Count files and show progress
total_files=$(wc -l < "$SCAN_RESULTS_DIR/files_to_scan.txt")
if [ "$total_files" -eq 0 ]; then
    echo "‚ùå No files found to scan"
    exit 1
fi

echo "üìÑ Scanning $total_files files..."

# Check if secretscan.py exists and is executable
if [ ! -f "$SECRETSCAN_PY" ]; then
    echo "‚ùå Error: secretscan.py not found at $SECRETSCAN_PY"
    exit 1
fi

if [ ! -r "$SECRETSCAN_PY" ]; then
    echo "‚ùå Error: secretscan.py is not readable"
    exit 1
fi

# Run the secret scan script
cd "$CURRENT_DIR"  # Change to repository directory for scanning
echo "‚ö° Running secret scan..."

# Initialize results file
echo "[]" > "$RESULTS_FILE"

# Create a temporary file for the Python merge script
MERGE_SCRIPT="$SCAN_RESULTS_DIR/merge_results.py"
cat > "$MERGE_SCRIPT" <<'EOF'
import json
import sys
import os

def merge_results(results_file, new_results_file):
    # Read existing results
    with open(results_file, 'r') as f:
        try:
            existing = json.load(f)
        except json.JSONDecodeError:
            existing = []
    
    # Read new results
    with open(new_results_file, 'r') as f:
        try:
            new = json.load(f)
        except json.JSONDecodeError:
            new = []
    
    # Merge and write back
    if isinstance(new, list):
        with open(results_file, 'w') as f:
            json.dump(existing + new, f, indent=2)

if __name__ == '__main__':
    if len(sys.argv) == 3:
        merge_results(sys.argv[1], sys.argv[2])
EOF

# Process each file
current_file=0
TEMP_RESULT="$SCAN_RESULTS_DIR/temp_result.json"
MAX_CONCURRENT_SCANS=5  # Set the maximum number of concurrent scans
jobs=()  # Array to hold job PIDs

while IFS= read -r file; do
    ((current_file++))
    echo -ne "\rProcessing file $current_file of $total_files"
    
    if [ -f "$file" ]; then
        # Run scan in the background
        {
            # Run scan and capture output to temporary file
            if $python_cmd "$SECRETSCAN_PY" "$file" > "$TEMP_RESULT" 2>/dev/null; then
                # If we got output and it's valid JSON, merge it with existing results
                if [ -s "$TEMP_RESULT" ] && $python_cmd -c "import json; json.load(open('$TEMP_RESULT'))" >/dev/null 2>&1; then
                    # Merge the results using the separate Python script
                    $python_cmd "$MERGE_SCRIPT" "$RESULTS_FILE" "$TEMP_RESULT"
                fi
            fi
        } &  # Run the scan in the background

        # Store the PID of the background job
        jobs+=($!)  # Add the PID to the jobs array

        # Limit the number of concurrent scans
        if [ ${#jobs[@]} -ge $MAX_CONCURRENT_SCANS ]; then
            # Wait for all background jobs to finish before starting new ones
            wait "${jobs[@]}"  # Wait for all jobs in the array
            jobs=()  # Clear the jobs array
        fi
    fi
done < "$SCAN_RESULTS_DIR/files_to_scan.txt"

# Wait for any remaining background jobs to finish
wait
echo  # New line after progress

# Clean up temporary files
rm -f "$TEMP_RESULT" "$MERGE_SCRIPT"

# Return to original directory
cd "$CURRENT_DIR"

# Check if results file exists and display results
if [ -f "$RESULTS_FILE" ] || [ -f "$DISALLOWED_FILES_LIST" ]; then
    has_content=false
    
    if [ -f "$RESULTS_FILE" ] && [ -s "$RESULTS_FILE" ]; then
        has_content=true
        echo "‚ö†Ô∏è Potential secrets found!"
    fi
    
    if [ -f "$DISALLOWED_FILES_LIST" ] && [ -s "$DISALLOWED_FILES_LIST" ]; then
        has_content=true
        echo "‚ö†Ô∏è Disallowed files found!"
    fi
    
    if [ "$has_content" = true ]; then
        echo "Generating HTML report..."
        if ! display_html_results "$RESULTS_FILE"; then
            echo "‚ùå Error: Failed to generate HTML report"
            rm -f "$DISALLOWED_FILES_LIST"  # Clean up disallowed files list after report generation
            exit 1
        fi
        
        # Clean up old reports (keep last 5) - macOS compatible version
        (cd "$REPORTS_DIR" && ls -t scan_report_*.html 2>/dev/null || true) | \
            awk 'NR>5' | \
            while read -r file; do rm -f "$REPORTS_DIR/$file"; done
            
        (cd "$SCAN_RESULTS_DIR" && ls -t scan_results_*.json 2>/dev/null || true) | \
            awk 'NR>5' | \
            while read -r file; do rm -f "$SCAN_RESULTS_DIR/$file"; done
        
        rm -f "$DISALLOWED_FILES_LIST"  # Clean up disallowed files list after report generation
    else
        echo "‚úÖ No potential secrets or disallowed files found in the repository."
        rm -f "$DISALLOWED_FILES_LIST"  # Clean up disallowed files list if no content
    fi
else
    echo "‚úÖ No potential secrets or disallowed files found in the repository."
    rm -f "$DISALLOWED_FILES_LIST"  # Clean up disallowed files list if no files exist
fi 