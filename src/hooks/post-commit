#!/usr/bin/env python3

import json
import os
import sys
from datetime import datetime
import webbrowser
from pathlib import Path

def get_git_info():
    """Get git commit information in a platform-independent way"""
    import subprocess
    
    def run_git_command(cmd):
        try:
            result = subprocess.run(['git'] + cmd, capture_output=True, text=True, check=True)
            return result.stdout.strip()
        except subprocess.CalledProcessError:
            return ""

    return {
        'hash': run_git_command(['rev-parse', 'HEAD']),
        'message': run_git_command(['log', '-1', '--pretty=%B']),
        'author': run_git_command(['log', '-1', '--pretty=%an']),
        'date': run_git_command(['log', '-1', '--pretty=%ad', '--date=local'])
    }

def create_html_report(metadata_file):
    """Create HTML report from metadata"""
    try:
        with open(metadata_file, 'r') as f:
            metadata = json.load(f)
    except Exception as e:
        print(f"Error reading metadata file: {e}")
        return None

    # Get commit information
    git_info = get_git_info()
    
    secrets_found = metadata.get('secrets_found', [])
    disallowed_files = metadata.get('disallowed_files', [])

    secrets_table_rows = "".join(
        f"""<tr>
            <td class="sno">{i}</td>
            <td class="filename">{data.get('file', '')}</td>
            <td class="line-number">{data.get('line_number', '')}</td>
            <td class="secret"><div class="secret-content">{data.get('line', '')}</div></td>
        </tr>"""
        for i, data in enumerate(secrets_found, 1)
    ) if secrets_found else "<tr><td colspan='4' style='text-align: center;'>No secrets found</td></tr>"

    disallowed_files_rows = "".join(
        f"""<tr>
            <td class="sno">{i}</td>
            <td class="filename">{file}</td>
        </tr>"""
        for i, file in enumerate(disallowed_files, 1)
    ) if disallowed_files else "<tr><td colspan='2' style='text-align: center;'>No disallowed files</td></tr>"

    html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Commit Review Results</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>
    <style>
        body {{ font-family: -apple-system, system-ui, sans-serif; margin: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
        .commit-info {{ 
            background: #f8f9fa; 
            padding: 15px; 
            border-radius: 5px; 
            margin-bottom: 20px;
            border-left: 4px solid #07439C;
        }}
        .commit-info p {{ margin: 5px 0; }}
        table {{ 
            width: 100%; 
            border-collapse: collapse; 
            margin-top: 20px;
            table-layout: fixed;
        }}
        th, td {{ 
            padding: 12px; 
            text-align: left; 
            border: 1px solid #ddd;
            vertical-align: top;
            overflow-wrap: break-word;
        }}
        th {{ background: #07439C; color: white; }}
        tr:nth-child(even) {{ background: #f9f9f9; }}
        .secret-content {{ 
            color: #d32f2f; 
            font-family: monospace;
            white-space: pre-wrap;
            padding: 4px 8px;
            border-radius: 4px;
            background: rgba(211, 47, 47, 0.05);
        }}
        .line-number {{ color: #e74c3c; font-weight: bold; text-align: center; }}
        .sno {{ text-align: center; }}
        h1, h2 {{ color: #07439C; margin-bottom: 20px; }}
        .download-btn {{
            padding: 10px 20px;
            background-color: #07439C;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-bottom: 20px;
        }}
        .download-btn:hover {{ background-color: #053278; }}
    </style>
</head>
<body>
    <div class="container">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <h1>Commit Review Results</h1>
            <button id="downloadButton" class="download-btn" onclick="generatePDF()">Download as PDF</button>
        </div>
        
        <div class="commit-info">
            <p><strong>Commit Hash:</strong> {git_info['hash']}</p>
            <p><strong>Author:</strong> {git_info['author']}</p>
            <p><strong>Date:</strong> {git_info['date']}</p>
            <p><strong>Message:</strong> {git_info['message']}</p>
        </div>

        <h2>Disallowed Files:</h2>
        <table>
            <tr>
                <th style="width:5%">S.No</th>
                <th style="width:95%">Filename</th>
            </tr>
            {disallowed_files_rows}
        </table>

        <h2>Potential Secrets:</h2>
        <table>
            <tr>
                <th style="width:5%">S.No</th>
                <th style="width:25%">Filename</th>
                <th style="width:10%">Line #</th>
                <th style="width:60%">Secret</th>
            </tr>
            {secrets_table_rows}
        </table>
    </div>

    <script>
    document.getElementById("downloadButton").addEventListener("click", function() {
        try {
            // Get secrets table data
            const secretsTable = document.querySelector('table:nth-of-type(2)');
            const secretRows = secretsTable.querySelectorAll("tr:not(:first-child)");
            const secrets = Array.from(secretRows).map(function(row) {
                const cells = row.querySelectorAll("td");
                return {
                    sno: cells[0] ? cells[0].innerText : "",
                    filename: cells[1] ? cells[1].innerText : "",
                    lineNumber: cells[2] ? cells[2].innerText : "",
                    secret: cells[3] ? cells[3].innerText : ""
                };
            });

            // Get disallowed files data
            const disallowedTable = document.querySelector('table:nth-of-type(1)');
            const disallowedRows = disallowedTable.querySelectorAll("tr:not(:first-child)");
            const disallowedFiles = Array.from(disallowedRows).map(function(row) {
                const cells = row.querySelectorAll("td");
                return {
                    sno: cells[0] ? cells[0].innerText : "",
                    filename: cells[1] ? cells[1].innerText : ""
                };
            });

            // Get commit info
            const commitInfo = {
                hash: document.querySelector('.commit-info p:nth-child(1)').textContent.split(': ')[1],
                author: document.querySelector('.commit-info p:nth-child(2)').textContent.split(': ')[1],
                date: document.querySelector('.commit-info p:nth-child(3)').textContent.split(': ')[1],
                message: document.querySelector('.commit-info p:nth-child(4)').textContent.split(': ')[1]
            };

            // Create file name using current date and commit hash
            const currentDate = new Date();
            const formattedDate = currentDate.toLocaleDateString('en-GB', {
                day: '2-digit',
                month: 'short',
                year: 'numeric'
            }).replace(' ', '_').replace(',', '');
            const fileName = 'commit_review_' + formattedDate + '_' + commitInfo.hash.substring(0, 7) + '.pdf';

            // Create the PDF document definition
            const docDefinition = {
                pageOrientation: 'landscape',
                content: [
                    { text: 'Commit Review Results', style: 'header' },
                    { text: 'Commit Information', style: 'subheader', margin: [0, 10, 0, 5] },
                    {
                        style: 'commitInfo',
                        table: {
                            widths: ['*'],
                            body: [[
                                {
                                    stack: [
                                        { text: 'Commit Hash: ' + commitInfo.hash },
                                        { text: 'Author: ' + commitInfo.author },
                                        { text: 'Date: ' + commitInfo.date },
                                        { text: 'Message: ' + commitInfo.message }
                                    ],
                                    margin: [0, 5, 0, 5]
                                }
                            ]],
                        },
                        layout: 'lightHorizontalLines'
                    }
                ]
            };

            // Add disallowed files section if there are any
            if (disallowedFiles.length > 0) {
                docDefinition.content.push(
                    { text: 'Disallowed Files', style: 'subheader', margin: [0, 15, 0, 5] },
                    {
                        table: {
                            headerRows: 1,
                            widths: ['10%', '90%'],
                            body: [
                                [
                                    { text: 'S.No', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                                    { text: 'Filename', fillColor: '#E9E5E5', bold: true }
                                ]
                            ].concat(disallowedFiles.map(function(file) {
                                return [
                                    { text: file.sno, alignment: 'center' },
                                    { text: file.filename }
                                ];
                            }))
                        },
                        margin: [0, 0, 0, 20]
                    }
                );
            }

            // Add secrets section
            docDefinition.content.push(
                { text: 'Potential Secrets', style: 'subheader', margin: [0, 15, 0, 5] },
                {
                    table: {
                        headerRows: 1,
                        widths: ['5%', '25%', '10%', '60%'],
                        body: [
                            [
                                { text: 'S.No', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                                { text: 'Filename', fillColor: '#E9E5E5', bold: true },
                                { text: 'Line #', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                                { text: 'Secret', fillColor: '#E9E5E5', bold: true }
                            ]
                        ].concat(secrets.map(function(secret) {
                            return [
                                { text: secret.sno, alignment: 'center' },
                                secret.filename,
                                { text: secret.lineNumber, alignment: 'center' },
                                secret.secret
                            ];
                        }))
                    }
                }
            );

            // Add styles
            docDefinition.styles = {
                header: {
                    fontSize: 18,
                    bold: true,
                    alignment: 'center',
                    margin: [0, 0, 0, 20]
                },
                subheader: {
                    fontSize: 14,
                    bold: true,
                    color: '#07439C'
                },
                tableHeader: {
                    bold: true,
                    fontSize: 12
                },
                commitInfo: {
                    margin: [0, 0, 0, 20]
                }
            };

            // Add default style
            docDefinition.defaultStyle = {
                fontSize: 10
            };

            // Create and download PDF
            const pdfDocGenerator = pdfMake.createPdf(docDefinition);
            pdfDocGenerator.download(fileName);

            // Log success
            console.log('PDF generated successfully:', fileName);
        } catch (error) {
            console.error('Error generating PDF:', error);
            alert('Error generating PDF. Please check the console for details.');
        }
    });
    </script>
</body>
</html>"""

    return html_content

def main():
    # Get the git hooks directory
    try:
        import subprocess
        hooks_path = subprocess.run(['git', 'config', '--global', '--get', 'core.hookspath'],
                                  capture_output=True, text=True, check=True).stdout.strip()
    except subprocess.CalledProcessError:
        hooks_path = os.path.dirname(os.path.abspath(__file__))

    # Create reports directory
    reports_dir = os.path.join(hooks_path, '.commit-reports')
    os.makedirs(reports_dir, exist_ok=True)

    # Check for metadata file
    metadata_file = ".commit_metadata.json"
    if not os.path.exists(metadata_file):
        print("No commit metadata found.")
        sys.exit(0)

    # Generate HTML report
    html_content = create_html_report(metadata_file)
    if not html_content:
        print("Failed to generate report.")
        sys.exit(1)

    # Save HTML report
    git_info = get_git_info()
    report_file = os.path.join(reports_dir, f"commit-review-{git_info['hash'][:7]}.html")
    
    try:
        with open(report_file, 'w') as f:
            f.write(html_content)
        print(f"\nCommit review report generated: {report_file}")
        
        # Open the report in browser
        webbrowser.open('file://' + os.path.abspath(report_file))
    except Exception as e:
        print(f"Error saving report: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main() 