#!/bin/bash
# Check Python availability
if command -v python3 > /dev/null 2>&1; then
   python_cmd="python3"
elif command -v python > /dev/null 2>&1; then
   python_cmd="python"
else
   echo "WARNING: Python3 is not installed. Commit review functionality will not work."
   exit 1
fi
# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}
# Function to display a Tkinter message box
show_message_box() {
    local message="$1"
    $python_cmd - <<EOF
import tkinter as tk
from tkinter import messagebox
root = tk.Tk()
root.withdraw()
messagebox.showinfo("Genie GitHooks", '''$message''')
EOF
}
# Function to get user confirmation via Tkinter
get_user_confirmation() {
    local prompt="$1"
    $python_cmd - <<EOF
import tkinter as tk
from tkinter import messagebox
root = tk.Tk()
root.withdraw()
response = messagebox.askyesno("Genie GitHooks", "$prompt")
print("Y" if response else "N")
EOF
}
# Check if Git is installed
if ! command_exists git; then
    show_message_box "Error: Git is not installed. Please install Git before proceeding."
    exit 1
fi
# Check if Git global username and email are set
GIT_USERNAME=$(git config --global user.name)
GIT_EMAIL=$(git config --global user.email)
 
if [ -z "$GIT_USERNAME" ] || [ -z "$GIT_EMAIL" ]; then
    show_message_box 'Error: Git global username and/or email is not set.\nPlease configure them using: \n git config --global user.name "Your Name" \n git config --global user.email "you@example.com"'
    exit 1
fi
# Get staged files
staged_files=$(git diff --cached --name-only)

if [[ -z "$staged_files" ]]; then
    show_message_box "No files staged for commit."
    exit 0
fi

# Configuration
DISALLOWED_EXTENSIONS=".crt,.cer,.ca-bundle,.p7b,.p7c,.p7s,.pem,.jceks,.key,.keystore,.jks,.p12,.pfx"

# Get the directory where this script is located
SCRIPT_DIR="$(git config --global --get core.hookspath)"
# Check for disallowed file extensions
disallowed_files=()
IFS=',' read -ra EXTENSIONS <<< "$DISALLOWED_EXTENSIONS"
for ext in "${EXTENSIONS[@]}"; do
    while IFS= read -r file; do
        if [[ -n "$file" ]]; then
            disallowed_files+=("$file")
        fi
    done < <(echo "$staged_files" | grep -i "\\${ext}$" || true)
done

# Run local secret scan
diff_content=$(git diff --cached)
if [[ -z "$diff_content" ]]; then
    show_message_box "No changes detected in the staged files."
    exit 0
fi

scan_results=$($python_cmd "$SCRIPT_DIR/commit-scripts/secretscan.py" --diff)
exit_code=$?

# Define a directory for temporary files within the hooks directory
TEMP_DIR="$SCRIPT_DIR/temp"
mkdir -p "$TEMP_DIR"

# Clean up the temp directory before creating new files
rm -f "$TEMP_DIR"/*

# Create combined results for UI
if [ $exit_code -eq 1 ] || [ ${#disallowed_files[@]} -gt 0 ]; then
    # Save scan results and disallowed files to temporary files
    temp_json_file=$(mktemp "$TEMP_DIR/secrets.XXXXXX.json") || { echo "Failed to create temp file for secrets"; exit 1; }
    temp_disallowed_file=$(mktemp "$TEMP_DIR/disallowed.XXXXXX.json") || { echo "Failed to create temp file for disallowed files"; exit 1; }
    
    # Save secrets scan results
    echo "$scan_results" > "$temp_json_file"
    
    # Save disallowed files as JSON array
    printf '%s\n' "${disallowed_files[@]}" | jq -R . | jq -s . > "$temp_disallowed_file"
    
    # Use Python to create a robust UI for displaying both secrets and disallowed files
    user_input=$($python_cmd - "$temp_json_file" "$temp_disallowed_file" <<EOF
import json
import sys
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox

def create_window(title, width=800, height=600):
    window = tk.Tk()
    window.title(title)
    
    # Set window size and position
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    center_x = int(screen_width/2 - width/2)
    center_y = int(screen_height/2 - height/2)
    window.geometry(f'{width}x{height}+{center_x}+{center_y}')
    
    return window

class ReviewWindow:
    def __init__(self):
        self.results = {"secrets": "N", "disallowed": "N"}
        self.windows = []

    def show_secrets_window(self, secrets_data):
        if not secrets_data:
            return
        
        root = create_window("Secrets Found - Genie GitHooks")
        self.windows.append(root)
        
        # Main frame
        main_frame = ttk.Frame(root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Warning message
        warning_label = ttk.Label(
            main_frame,
            text="⚠️ Potential secrets detected in your changes!",
            font=('Helvetica', 14, 'bold'),
            foreground='red'
        )
        warning_label.pack(pady=(0, 10))
        
        # Create text widget for displaying secrets
        text_widget = tk.Text(main_frame, wrap=tk.WORD, width=80, height=20)
        text_widget.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # Add scrollbar
        scrollbar = ttk.Scrollbar(text_widget, orient=tk.VERTICAL, command=text_widget.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        text_widget.configure(yscrollcommand=scrollbar.set)
        
        # Insert secrets information
        for item in secrets_data:
            text_widget.insert(tk.END, "━" * 50 + "\n")
            text_widget.insert(tk.END, f"File: {item['file']}\n")
            text_widget.insert(tk.END, f"Pattern: {item['pattern']}\n")
            text_widget.insert(tk.END, f"Line {item['line_number']}: {item['line']}\n\n")
        
        text_widget.configure(state='disabled')  # Make text read-only
        
        # Warning message at bottom
        caution_label = ttk.Label(
            main_frame,
            text="⚠️ Caution: These secrets will be committed if you proceed!",
            foreground='red'
        )
        caution_label.pack(pady=(0, 10))
        
        # Button frame
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(0, 10))
        
        def on_proceed():
            self.results["secrets"] = "Y"
            root.quit()
        
        def on_abort():
            self.results["secrets"] = "N"
            root.quit()
        
        # Add buttons
        abort_btn = ttk.Button(button_frame, text="Abort Commit", command=on_abort)
        abort_btn.pack(side=tk.LEFT, padx=5)
        
        proceed_btn = ttk.Button(button_frame, text="Proceed Anyway", command=on_proceed)
        proceed_btn.pack(side=tk.LEFT, padx=5)
        
        root.protocol("WM_DELETE_WINDOW", on_abort)
        return root

    def show_disallowed_files_window(self, disallowed_files):
        if not disallowed_files:
            return
        
        root = create_window("Disallowed Files - Genie GitHooks", width=600, height=400)
        self.windows.append(root)
        
        # Main frame
        main_frame = ttk.Frame(root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Warning message
        warning_label = ttk.Label(
            main_frame,
            text="⚠️ Disallowed file types detected!",
            font=('Helvetica', 14, 'bold'),
            foreground='red'
        )
        warning_label.pack(pady=(0, 10))
        
        # Create text widget for displaying files
        text_widget = tk.Text(main_frame, wrap=tk.WORD, width=60, height=15)
        text_widget.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # Add scrollbar
        scrollbar = ttk.Scrollbar(text_widget, orient=tk.VERTICAL, command=text_widget.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        text_widget.configure(yscrollcommand=scrollbar.set)
        
        # Insert files information
        text_widget.insert(tk.END, "The following files have disallowed extensions:\n\n")
        for file in disallowed_files:
            text_widget.insert(tk.END, f"• {file}\n")
        
        text_widget.configure(state='disabled')
        
        # Warning message at bottom
        caution_label = ttk.Label(
            main_frame,
            text="⚠️ Caution: These files will be committed if you proceed!",
            foreground='red'
        )
        caution_label.pack(pady=(0, 10))
        
        # Button frame
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(0, 10))
        
        def on_proceed():
            self.results["disallowed"] = "Y"
            root.quit()
        
        def on_abort():
            self.results["disallowed"] = "N"
            root.quit()
        
        # Add buttons
        abort_btn = ttk.Button(button_frame, text="Abort Commit", command=on_abort)
        abort_btn.pack(side=tk.LEFT, padx=5)
        
        proceed_btn = ttk.Button(button_frame, text="Proceed Anyway", command=on_proceed)
        proceed_btn.pack(side=tk.LEFT, padx=5)
        
        root.protocol("WM_DELETE_WINDOW", on_abort)
        return root

    def run_windows(self, secrets_data, disallowed_data):
        # Show secrets window first if there are secrets
        if secrets_data:
            secrets_window = self.show_secrets_window(secrets_data)
            secrets_window.mainloop()
            secrets_window.destroy()
            
            # If secrets were not approved, abort immediately
            if self.results["secrets"] != "Y":
                self.show_abort_window()
                return "N"
        
        # Only show disallowed files window if secrets were approved or there were no secrets
        if disallowed_data:
            disallowed_window = self.show_disallowed_files_window(disallowed_data)
            disallowed_window.mainloop()
            disallowed_window.destroy()
            
            # If disallowed files were not approved, show abort window
            if self.results["disallowed"] != "Y":
                self.show_abort_window()
                return "N"
            
            return "Y"
        
        # If we got here, either:
        # 1. There were only secrets and they were approved
        # 2. There were no issues at all
        result = "Y" if not secrets_data or self.results["secrets"] == "Y" else "N"
        if result == "N":
            self.show_abort_window()
        return result

    def show_abort_window(self):
        root = create_window("Commit Aborted - Genie GitHooks", width=400, height=200)
        
        # Main frame
        main_frame = ttk.Frame(root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Warning icon and message
        warning_label = ttk.Label(
            main_frame,
            text="⚠️ Commit Aborted",
            font=('Helvetica', 16, 'bold'),
            foreground='red'
        )
        warning_label.pack(pady=(0, 15))
        
        # Detailed message
        message_label = ttk.Label(
            main_frame,
            text="The commit has been aborted due to unresolved issues.\nPlease review and address the concerns before committing.",
            justify=tk.CENTER,
            wraplength=350
        )
        message_label.pack(pady=(0, 20))
        
        # OK button
        ok_button = ttk.Button(main_frame, text="OK", command=root.destroy)
        ok_button.pack()
        
        # Center the button
        ok_button.pack_configure(anchor=tk.CENTER)
        
        # Handle window close
        root.protocol("WM_DELETE_WINDOW", root.destroy)
        
        # Make window modal
        root.transient()
        root.grab_set()
        root.wait_window()

try:
    # Read the JSON data from the temporary files
    with open(sys.argv[1], 'r') as f:
        scan_data = json.load(f)
    with open(sys.argv[2], 'r') as f:
        disallowed_data = json.load(f)
    
    # Create and run review windows
    review = ReviewWindow()
    result = review.run_windows(scan_data, disallowed_data)
    print(result)
except Exception as e:
    print(f"Error: {str(e)}", file=sys.stderr)
    print("N")  # Default to No on any error
EOF
)

    if [[ "$user_input" != "Y" ]]; then
        exit 1
    fi

    # Save the results as metadata
    has_secrets="true"
    secrets_list_json="$scan_results"
    has_disallowed_files="true"
    disallowed_files_json="$(printf '%s\n' "${disallowed_files[@]}" | jq -R . | jq -s .)"
else
    has_secrets="false"
    secrets_list_json="[]"
    has_disallowed_files="false"
    disallowed_files_json="[]"
fi

# Save metadata for post-commit hook
metadata_file="$SCRIPT_DIR/.commit_metadata.json"
echo "Metadata file: $metadata_file"
commit_metadata=$(cat <<EOF
{
    "has_secrets": $has_secrets,
    "secrets_found": $secrets_list_json,
    "has_disallowed_files": $has_disallowed_files,
    "disallowed_files": $disallowed_files_json
}
EOF
)

echo "$commit_metadata" > "$metadata_file"
exit 0
